load("C:/Users/ainau/Downloads/Projets/Machine_Deep_Learning/Stat_descr et multidim/data.baby.RData")
library(dplyr)
library(FactoMineR)
library(factoextra)
library(ggplot2)
library("GGally")
library(ggrepel)
res.acp_nnorm = PCA(data.baby2.comp, scale.unit = FALSE)
fviz_pca_var(res.acp_nnorm, repel = T)
res.acp_nnorm$var$coord[,1]
# Calcul des valeurs moyennes et des quantiles 10% et 90% des variables numériques de data.baby2.comp
data_baby2_mean = apply(data.baby2.comp,2,mean) ## moyenne appliquée suivant les colonnes
data_baby2_mean
data_baby2_q10 <- apply(data.baby2.comp, 2, quantile, probs = 0.1)
data_baby2_q90 <- apply(data.baby2.comp, 2, quantile, probs = 0.9)
# Matrice de corrélation
sd_real = function(x){sqrt(mean((x-mean(x))^2))}
data_baby2_cv = apply(data.baby2.comp,2,cv)
View(data.baby2.comp)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(ggplot2)
library("GGally")
library(ggrepel)
res.acp_nnorm = PCA(data.baby2.comp, scale.unit = FALSE)
load("C:/Users/ainau/Downloads/Projets/Machine_Deep_Learning/Stat_descr et multidim/data.baby.RData")
res.acp_nnorm = PCA(data.baby2.comp, scale.unit = FALSE)
fviz_pca_var(res.acp_nnorm, repel = T)
res.acp_nnorm$var$coord[,1]
data_baby2_mean = apply(data.baby2.comp,2,mean) ## moyenne appliquée suivant les colonnes
data_baby2_mean
data_baby2_q10 <- apply(data.baby2.comp, 2, quantile, probs = 0.1)
data_baby2_q90 <- apply(data.baby2.comp, 2, quantile, probs = 0.9)
sd_real = function(x){sqrt(mean((x-mean(x))^2))}
data_baby2_cv = apply(data.baby2.comp,2,cv)
# Lire le fichier .Rmd
rmd_content <- readLines("C:/Users/ainau/Downloads/Université de Bordeaux/1ère année/Représentation de données et statistique multidimensionnelle/Projet Vitamine/Projet RDSM VVF.Rmd")
# Initialiser les variables
in_code_chunk <- FALSE
extracted_code <- c()
# Parcourir le fichier ligne par ligne
for (line in rmd_content) {
if (grepl("^```\\{r", line)) {
in_code_chunk <- TRUE  # Début d'un bloc de code
} else if (grepl("^```", line)) {
in_code_chunk <- FALSE  # Fin d'un bloc de code
} else if (in_code_chunk) {
extracted_code <- c(extracted_code, line)  # Extraire la ligne de code
}
}
# Écrire le code dans un fichier .R
writeLines(extracted_code, "Projet RDSM 2022_2023.R")
# Lire le fichier .Rmd
rmd_content <- readLines("C:/Users/ainau/Downloads/Université de Bordeaux/1ère année/Représentation de données et statistique multidimensionnelle/Projet Vitamine/Projet RDSM VVF.Rmd")
# Initialiser les variables
in_code_chunk <- FALSE
extracted_code <- c()
# Parcourir le fichier ligne par ligne
for (line in rmd_content) {
if (grepl("^```\\{r", line)) {
in_code_chunk <- TRUE  # Début d'un bloc de code
} else if (grepl("^```", line)) {
in_code_chunk <- FALSE  # Fin d'un bloc de code
} else if (in_code_chunk) {
extracted_code <- c(extracted_code, line)  # Extraire la ligne de code
}
}
# Écrire le code dans un fichier .R
writeLines(extracted_code, "Projet RDSM 2022_2023.R")
load("C:/Users/ainau/Downloads/Projets/Machine_Deep_Learning/Stat_descr et multidim/data.baby.RData")
library(dplyr)
library(FactoMineR)
library(factoextra)
library(ggplot2)
library(GGally)
library(ggrepel)
library(gridExtra)
#chargement du fichier Rdata
load("data.baby.RData")
X=data.baby2.comp
res.acp_nnorm = PCA(X, scale.unit = F, graph = F)
fviz_pca_var(res.acp_nnorm, col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
#res.acp_nnorm$var$coord[,1]
# matrice des données centrée réduites
Z = scale(X)*sqrt(362/361)
#matrice de corrélation
corZ=cor(Z)
corZ
# ACP normée
acp_Z = PCA(X, scale.unit = T, graph = F)
#  tableau de valeurs propres
acp_Z$eig
#éboulis du tableau des valeurs propres
fviz_screeplot(acp_Z,ncp=13,addlabels=TRUE)
#les cerles  cercles de correlation
cercle1_2=fviz_pca_var(acp_Z,axes=c(1,2),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
cercle3_4=fviz_pca_var(acp_Z,axes=c(3,4),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
grid.arrange(cercle1_2,cercle3_4,ncol=2)
premier_plan_fac = acp_Z$ind$coord[,c(1,2)]
cor_fac = premier_plan_fac[c(237,218,216,144,141,140,149,340,125),]
cor_fac
var_abs1 = apply(acp_Z$ind$coord, 2, var) * 361/362
var_abs1
f= function(x){sum(x^2)} # fonction tirée à partir de la contribution
var_absc2 = apply(acp_Z$var$coord, 2, f)
var_absc2
fviz_contrib(acp_Z, choice = "ind", axes = 1, top = 20)
fviz_contrib(acp_Z, choice = "ind", axes = 2, top = 20)
fviz_contrib(acp_Z, choice = "ind", axes =1:2, top = 20)
proj_ind1=fviz_pca_ind(acp_Z,axes=c(1,2),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_ind1
proj_ind2=fviz_pca_ind(acp_Z,axes=c(3,4),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_ind2
X1 = X[,-c(10:13)]
# matrice des données centrée réduites
Z1=scale(X1)*sqrt(362/361)
#matrice de corrélation
corZ1=cor(Z1)
corZ1
# ACP normée
acp_Z1= PCA(X,quanti.sup=10:13, scale.unit = T,graph = F)
#  tableau de valeurs propres
acp_Z1$eig
#éboulis du tableau des valeurs propres
fviz_screeplot(acp_Z1,ncp=9,addlabels=TRUE)
#les cerles  cercles de correlation
cercleZ1_2=fviz_pca_var(acp_Z1,axes=c(1,2),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
cercleZ3_4=fviz_pca_var(acp_Z1,axes=c(3,4),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
grid.arrange(cercleZ1_2,cercleZ3_4,ncol=2)
premier_plan_facZ1 =acp_Z1$ind$coord[,c(1,2)]
cor_facZ1=premier_plan_facZ1[c(237,218,216,144,141,140,149,340,125),]
cor_facZ1
var_absZ1 = apply(acp_Z1$ind$coord, 2, var)*361/362
var_absZ1
var_abscZ2 = apply(acp_Z1$var$coord, 2, f)
var_abscZ2
fviz_contrib(acp_Z1, choice = "ind", axes = 1, top = 20)
fviz_contrib(acp_Z1, choice = "ind", axes = 2, top = 20)
fviz_contrib(acp_Z1, choice = "ind", axes =1:2, top = 20)
proj_indZ1=fviz_pca_ind(acp_Z1,axes=c(1,2),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_indZ1
proj_indZ2=fviz_pca_ind(acp_Z1,axes=c(3,4),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_indZ2
ind_plts_filtr <- which(acp_Z1$ind$coord[, 1] > 3 & acp_Z1$ind$coord[, 2] < 0)
acp_Z1$ind$coord[ind_plts_filtr,c(1,2)] # vérification
X2=X[-ind_plts_filtr,-c(10:13)]
# matrice des données centrée réduites
Z2=scale(X2)*sqrt(nrow(X2)/(nrow(X2)-1))
#matrice de corrélation
corZ2 = cor(Z2)
corZ2
# ACP normée
acp_Z2 = PCA(X[-ind_plts_filtr,], quanti.sup = 10:13, scale.unit = TRUE , graph=FALSE)
#  tableau de valeurs propres
acp_Z2$eig
#éboulis du tableau des valeurs propres
fviz_screeplot(acp_Z2,ncp=9,addlabels=TRUE)
#les cerles  cercles de correlation
cercleZZ1_2=fviz_pca_var(acp_Z2,axes=c(1,2),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
cercleZZ3_4=fviz_pca_var(acp_Z2,axes=c(3,4),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
grid.arrange(cercleZZ1_2,cercleZZ3_4,ncol=2)
var_abscZZ1 = apply(acp_Z2$ind$coord, 2, var)*(nrow(X2)-1)/nrow(X2)
var_abscZZ1
var_abscZZ2 = apply(acp_Z2$var$coord, 2, f)
var_abscZZ2
fviz_contrib(acp_Z2, choice = "ind", axes = 1, top = 20)
fviz_contrib(acp_Z2, choice = "ind", axes = 2, top = 20)
fviz_contrib(acp_Z2, choice = "ind", axes =1:2, top = 20)
proj_indZZ1=fviz_pca_ind(acp_Z2,axes=c(1,2),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_indZZ1
proj_indZZ2=fviz_pca_ind(acp_Z2,axes=c(3,4),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_indZZ2
proj_indZZ2
# Charger les packages
library(gapminder)
library(dplyr)
library(ggplot2)
# Filtrer les données pour les années 1957 et 2007
gapminder_1957_2007 <- gapminder %>%
filter(year %in% c(1957, 2007))
gapminder_1957_2007
# Analyse univariée de l'espérance de vie
esp_vie_summary <- gapminder_1957_2007 %>%
group_by(year) %>%
summarize(
Moyenne_EspVie = mean(lifeExp),
Median_EspVie = median(lifeExp),
Ecart_Type_EspVie = sd(lifeExp,unbaised = FALSE),
Quartile_25_EspVie = quantile(lifeExp, 0.25),
Quartile_75_EspVie = quantile(lifeExp, 0.75)
)
# Lire le fichier .Rmd
rmd_content <- readLines("C:/Users/ainau/Downloads/Université de Bordeaux/1ère année/Représentation de données et statistique multidimensionnelle/Exercice3_RDSM.Rmd")
############################################## Extraction de fichier R
# Lire le fichier .Rmd
rmd_content <- readLines("C:/Users/ainau/Downloads/Université de Bordeaux/1ère année/Représentation de données et statistique multidimensionnelle/Statistisque Descriptive/Exercice3_RDSM.Rmd")
# Initialiser les variables
in_code_chunk <- FALSE
extracted_code <- c()
# Parcourir le fichier ligne par ligne
for (line in rmd_content) {
if (grepl("^```\\{r", line)) {
in_code_chunk <- TRUE  # Début d'un bloc de code
} else if (grepl("^```", line)) {
in_code_chunk <- FALSE  # Fin d'un bloc de code
} else if (in_code_chunk) {
extracted_code <- c(extracted_code, line)  # Extraire la ligne de code
}
}
# Écrire le code dans un fichier .R
writeLines(extracted_code, "Projet RDSM 2022_2023.R")
library(dplyr)
library(FactoMineR)
library(factoextra)
library(ggplot2)
library(GGally)
library(ggrepel)
library(gridExtra)
#chargement du fichier Rdata
load("data.baby.RData")
X=data.baby2.comp
res.acp_nnorm = PCA(X, scale.unit = F, graph = F)
fviz_pca_var(res.acp_nnorm, col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
#res.acp_nnorm$var$coord[,1]
# matrice des données centrée réduites
Z = scale(X)*sqrt(362/361)
#matrice de corrélation
corZ=cor(Z)
corZ
# ACP normée
acp_Z = PCA(X, scale.unit = T, graph = F)
#  tableau de valeurs propres
acp_Z$eig
#éboulis du tableau des valeurs propres
fviz_screeplot(acp_Z,ncp=13,addlabels=TRUE)
#les cerles  cercles de correlation
cercle1_2=fviz_pca_var(acp_Z,axes=c(1,2),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
cercle3_4=fviz_pca_var(acp_Z,axes=c(3,4),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
grid.arrange(cercle1_2,cercle3_4,ncol=2)
premier_plan_fac = acp_Z$ind$coord[,c(1,2)]
cor_fac = premier_plan_fac[c(237,218,216,144,141,140,149,340,125),]
cor_fac
var_abs1 = apply(acp_Z$ind$coord, 2, var) * 361/362
var_abs1
f= function(x){sum(x^2)} # fonction tirée à partir de la contribution
var_absc2 = apply(acp_Z$var$coord, 2, f)
var_absc2
fviz_contrib(acp_Z, choice = "ind", axes = 1, top = 20)
fviz_contrib(acp_Z, choice = "ind", axes = 2, top = 20)
fviz_contrib(acp_Z, choice = "ind", axes =1:2, top = 20)
proj_ind1=fviz_pca_ind(acp_Z,axes=c(1,2),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_ind1
proj_ind2=fviz_pca_ind(acp_Z,axes=c(3,4),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_ind2
X1 = X[,-c(10:13)]
# matrice des données centrée réduites
Z1=scale(X1)*sqrt(362/361)
#matrice de corrélation
corZ1=cor(Z1)
corZ1
# ACP normée
acp_Z1= PCA(X,quanti.sup=10:13, scale.unit = T,graph = F)
#  tableau de valeurs propres
acp_Z1$eig
#éboulis du tableau des valeurs propres
fviz_screeplot(acp_Z1,ncp=9,addlabels=TRUE)
#les cerles  cercles de correlation
cercleZ1_2=fviz_pca_var(acp_Z1,axes=c(1,2),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
cercleZ3_4=fviz_pca_var(acp_Z1,axes=c(3,4),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
grid.arrange(cercleZ1_2,cercleZ3_4,ncol=2)
premier_plan_facZ1 =acp_Z1$ind$coord[,c(1,2)]
cor_facZ1=premier_plan_facZ1[c(237,218,216,144,141,140,149,340,125),]
cor_facZ1
var_absZ1 = apply(acp_Z1$ind$coord, 2, var)*361/362
var_absZ1
var_abscZ2 = apply(acp_Z1$var$coord, 2, f)
var_abscZ2
fviz_contrib(acp_Z1, choice = "ind", axes = 1, top = 20)
fviz_contrib(acp_Z1, choice = "ind", axes = 2, top = 20)
fviz_contrib(acp_Z1, choice = "ind", axes =1:2, top = 20)
proj_indZ1=fviz_pca_ind(acp_Z1,axes=c(1,2),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_indZ1
proj_indZ2=fviz_pca_ind(acp_Z1,axes=c(3,4),col.ind = "cos2", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
proj_indZ2
ind_plts_filtr <- which(acp_Z1$ind$coord[, 1] > 3 & acp_Z1$ind$coord[, 2] < 0)
acp_Z1$ind$coord[ind_plts_filtr,c(1,2)] # vérification
X2=X[-ind_plts_filtr,-c(10:13)]
# matrice des données centrée réduites
Z2=scale(X2)*sqrt(nrow(X2)/(nrow(X2)-1))
#matrice de corrélation
corZ2 = cor(Z2)
corZ2
# ACP normée
acp_Z2 = PCA(X[-ind_plts_filtr,], quanti.sup = 10:13, scale.unit = TRUE , graph=FALSE)
#  tableau de valeurs propres
acp_Z2$eig
#éboulis du tableau des valeurs propres
fviz_screeplot(acp_Z2,ncp=9,addlabels=TRUE)
#les cerles  cercles de correlation
cercleZZ1_2=fviz_pca_var(acp_Z2,axes=c(1,2),col.var = "contrib", gradient.cols = c("#FF5733", "#FFD700", "#4CAF50"), repel = T)
# Lire le fichier .Rmd
rmd_content <- readLines("C:/Users/ainau/Downloads/Université de Bordeaux/1ère année/Représentation de données et statistique multidimensionnelle/Statistisque Descriptive/Exercice3_RDSM.Rmd")
# Initialiser les variables
in_code_chunk <- FALSE
extracted_code <- c()
# Parcourir le fichier ligne par ligne
for (line in rmd_content) {
if (grepl("^```\\{r", line)) {
in_code_chunk <- TRUE  # Début d'un bloc de code
} else if (grepl("^```", line)) {
in_code_chunk <- FALSE  # Fin d'un bloc de code
} else if (in_code_chunk) {
extracted_code <- c(extracted_code, line)  # Extraire la ligne de code
}
}
# Écrire le code dans un fichier .R
writeLines(extracted_code, "Stats_Descr.R")
library("div")
library("conflicted")
library(gapminder)
library(dplyr)
library(ggplot2)
gapminder_57_87_07 <- dplyr::filter(gapminder, year %in% c(1957,1987, 2007))
head(gapminder_57_87_07)
esp_vie <- group_by(gapminder_57_87_07, year)
esp_vie_summary <- summarize(esp_vie,
Moy_EspVie = mean(lifeExp),
Med_EspVie = median(lifeExp),
Sd_EspVie = sd(lifeExp) * sqrt((length(lifeExp) / (length(lifeExp) - 1))),
CV_Espvie = Sd_EspVie / Moy_EspVie,
Q25_EspVie = quantile(lifeExp, 0.25),
Q75_EspVie = quantile(lifeExp, 0.75))
print(esp_vie_summary)
ggplot(gapminder_57_87_07, aes(x = year, y = lifeExp, color = factor(year))) +
geom_boxplot() +
labs(x = "Année", y = "Espérance de vie",
title = "Évolution de l'espérance de vie (1957-1987-2007)") + scale_color_discrete(name = "Année")
gdp <- group_by(gapminder_57_87_07, year)
gdp_percap_summary <- summarize(gdp,
Moy_gdp = mean(gdpPercap),
Med_gdp = median(gdpPercap),
Sd_gdp = sd(gdpPercap) * sqrt((length(gdpPercap) / (length(gdpPercap) - 1))),
CV_gdp = Sd_gdp / Moy_gdp,
Q25_gdp = quantile(gdpPercap, 0.25),
Q75_gdp = quantile(gdpPercap, 0.75))
print(gdp_percap_summary)
ggplot(gapminder_57_87_07, aes(x = year, y = gdpPercap, color = factor(year))) +
geom_violin() +
labs(x = "Année", y = "Pib par habitant",
title = "Évolution du PIB par habitant (1957-1987-2007)") + scale_color_discrete(name = "Année")
correlation <- cor(gapminder_57_87_07$lifeExp, gapminder_57_87_07$gdpPercap)
correlation
ggplot(gapminder_57_87_07, aes(x = lifeExp, fill = continent)) + geom_density() +
labs(x = " Espérance de vie",y = " Densité ",
title = "Relation entre l'espérance de vie et les continents") + facet_wrap(~continent)
ggplot(esp_vie_summary, aes(x = year,  y = Moy_EspVie, fill = factor(year))) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Moy_EspVie, 2)), vjust = -0.5) +
labs(x = "Année",y = " Espérance de vie",
title = "Moyenne de l'Espérance de vie par année")
ggplot(gdp_percap_summary, aes(x = year,  y = Moy_gdp, fill = factor(year))) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(Moy_gdp, 2)), vjust = -0.5) +
labs(
x = "Année",
y = " PIB par habitant",
title = "Moyenne du PIB par habitant par année")
ggplot(gdp_percap_summary, aes(x = factor(year))) +
geom_bar(aes(y = Moy_gdp, fill = "Moyenne"), stat = "identity", position = position_dodge(width = 0.75), width = 0.5) +
geom_bar(aes(y = Med_gdp, fill = "Médiane"), stat = "identity", position = position_dodge(width = 0.75), width = 0.5) +
geom_text(aes(y = Moy_gdp, label = round(Moy_gdp, 2)), vjust = -0.5, position = position_dodge(width = 0.75)) +
geom_text(aes(y = Med_gdp, label = round(Med_gdp, 2)), vjust = -0.5, position = position_dodge(width = 0.75)) +
labs(
x = "Année",
y = "PIB par habitant",
title = "Moyenne et Médiane du PIB par habitant par année"
)
ggplot(gapminder_57_87_07, aes(x = lifeExp, y = gdpPercap,color = factor(year))) +
geom_point() + labs(x = "Espérance de vie", y = "PIB par habitant",
title = "Relation entre PIB par habitant et l'espérance de vie (Filtre Année)") +
scale_color_discrete(name = "Année")
ggplot(gapminder_57_87_07, aes(x = lifeExp, y = gdpPercap,color = factor(continent))) +
geom_boxplot() + labs(x = "Espérance de vie", y = "PIB par habitant",
title = "Relation entre PIB par habitant et l'espérance de vie (Filtre continent)") +
scale_color_discrete(name = "Continent")
